{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[],"authorship_tag":"ABX9TyOcchmJEUlyw9voeflxAexf"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"code","source":["import numpy as np\n","grafo = ([[ 0,  7,  9,  8, 20],\n","       [ 7,  0, 10,  4, 11],\n","       [ 9, 10,  0, 15,  5],\n","       [ 8,  4, 15,  0, 17],\n","       [20, 11,  5, 17,  0]])\n","\n","# Número de nodos en el grafo\n","num_nodos = len(grafo)\n","grafo"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"ztPHJa8THJGZ","executionInfo":{"status":"ok","timestamp":1718626394822,"user_tz":240,"elapsed":4,"user":{"displayName":"Williams Rodrigo Surco Nina","userId":"06491161336963034792"}},"outputId":"58852f95-1a2a-42df-a23c-ec51c95dae50"},"execution_count":1,"outputs":[{"output_type":"execute_result","data":{"text/plain":["[[0, 7, 9, 8, 20],\n"," [7, 0, 10, 4, 11],\n"," [9, 10, 0, 15, 5],\n"," [8, 4, 15, 0, 17],\n"," [20, 11, 5, 17, 0]]"]},"metadata":{},"execution_count":1}]},{"cell_type":"code","source":["import random\n","\n","def distancia(x, y, grafo):\n","    return grafo[x][y]\n","\n","def tsp(grafo):\n","    tamano_poblacion = 100\n","    generaciones = 1000\n","\n","    poblacion = [[random.randint(0, len(grafo) - 1) for _ in range(len(grafo))] for _ in range(tamano_poblacion)]\n","\n","    for _ in range(generaciones):\n","        # Seleccionar los individuos más aptos\n","        seleccionados = seleccion(poblacion, grafo)\n","\n","        # Cruzar los individuos seleccionados\n","        descendencia = cruce(seleccionados)\n","\n","        # Mutar los individuos\n","        descendencia = mutar(descendencia)\n","\n","        # Reemplazar la población antigua por la nueva población\n","        poblacion = descendencia\n","\n","    return poblacion[0]\n","\n","def seleccion(poblacion, grafo):\n","    seleccionados = []\n","    for _ in range(len(poblacion)):\n","        i = random.randint(0, len(poblacion) - 1)\n","        seleccionados.append((poblacion[i], evaluar_ruta(poblacion[i], grafo)))\n","\n","    seleccionados.sort(key=lambda x: x[1])\n","    seleccionados = [ind for ind, _ in seleccionados[:len(poblacion)]]\n","    return seleccionados\n","\n","def evaluar_ruta(ruta, grafo):\n","    distancia_total = 0\n","    for i in range(len(ruta) - 1):\n","        distancia_total += distancia(ruta[i], ruta[i + 1], grafo)\n","    distancia_total += distancia(ruta[-1], ruta[0], grafo)  # Regresar al nodo inicial\n","    return distancia_total\n","\n","def cruce(poblacion):\n","    descendencia = []\n","    for i in range(0, len(poblacion), 2):\n","        padre1, padre2 = poblacion[i], poblacion[i + 1]\n","        k = random.randint(1, max(len(padre1) - 2, 1))  # Asegurarse de que k sea al menos 1\n","        hijo1 = padre1[:k] + [nodo for nodo in padre2 if nodo not in padre1[:k]]\n","        hijo2 = padre2[:k] + [nodo for nodo in padre1 if nodo not in padre2[:k]]\n","        descendencia.extend([hijo1, hijo2])\n","    return descendencia\n","\n","def mutar(poblacion):\n","    tasa_mutacion = 0.1\n","    for i in range(len(poblacion)):\n","        if random.random() < tasa_mutacion:\n","            j, k = random.sample(range(len(poblacion[i])), 2)\n","            poblacion[i][j], poblacion[i][k] = poblacion[i][k], poblacion[i][j]\n","    return poblacion\n","\n","if __name__ == \"__main__\":\n","    mejor_ruta = tsp(grafo)\n","    print(\"Mejor ruta encontrada:\", mejor_ruta)\n","    print(\"Distancia total:\", evaluar_ruta(mejor_ruta, grafo))"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"DbOnOaobHb7M","executionInfo":{"status":"ok","timestamp":1718626417903,"user_tz":240,"elapsed":750,"user":{"displayName":"Williams Rodrigo Surco Nina","userId":"06491161336963034792"}},"outputId":"4b5a00ac-b679-459e-c98c-0f1690451bb4"},"execution_count":2,"outputs":[{"output_type":"stream","name":"stdout","text":["Mejor ruta encontrada: [2, 4, 3, 1, 0]\n","Distancia total: 42\n"]}]}]}